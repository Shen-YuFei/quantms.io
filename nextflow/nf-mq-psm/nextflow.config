// nextflow.config
params {
    // Default parameters
    raw_dir = './raw'
    mzml_dir = './mzml'
    output_dir = './results'
    msms_file = 'msms.txt'

    // Performance parameters
    chunksize = 1000000
    output_prefix_file = "psm"
    file_num = 20
    partitions = ""

    // Resource limits
    max_memory = 128.GB
    max_cpus = 16
    max_time = 72.h
}

// Include base configuration
includeConfig 'conf/base.config'

// Process-specific resources
process {
    // Default resources for all processes
    cpus = { check_max(1, 'cpus') }
    memory = { check_max(4.GB, 'memory') }
    time = { check_max(2.h, 'time') }

    // Process-specific resources
    withLabel:process_medium {
        cpus = { check_max(4, 'cpus') }
        memory = { check_max(8.GB, 'memory') }
        time = { check_max(8.h, 'time') }
    }

    withLabel:process_high {
        cpus = { check_max(8, 'cpus') }
        memory = { check_max(16.GB, 'memory') }
        time = { check_max(24.h, 'time') }
    }

    withLabel:process_high_memory {
        cpus = { check_max(8, 'cpus') }
        memory = { check_max(64.GB, 'memory') }
        time = { check_max(24.h, 'time') }
    }
}

// Execution profiles
profiles {
    docker {
        docker.enabled         = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        docker.runOptions      = '-u $(id -u):$(id -g)'
    }

    arm {
        docker.runOptions      = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }

    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }

    ebislurm {
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = true

        executor {
            name = "slurm"
            queueSize = 1000
            submitRateLimit = "10/1sec"
            exitReadTimeout = "30 min"
            jobName = {
                task.name
                .replace("[", "(")
                .replace("]", ")")
                .replace(" ", "_")
            }
        }

        singularity.autoMounts = false
        singularity.runOptions = '-B /hps/nobackup/juan/pride/reanalysis:/hps/nobackup/juan/pride/reanalysis'
        singularity.cacheDir = "/hps/nobackup/juan/pride/reanalysis/singularity/"
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Manifest
manifest {
    name            = 'MS Data Processing'
    author          = 'Your Name'
    homePage        = 'https://github.com/yourusername/msworkflow'
    description     = 'Nextflow pipeline for mass spectrometry data processing'
    mainScript      = 'main.nf'
    nextflowVersion = '>=22.10.0'
    version         = '1.0.0'
}